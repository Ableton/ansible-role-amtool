---
- name: Set amtool_exe from an environment variable
  ansible.builtin.set_fact:
    amtool_exe: "{{ lookup('env', 'AMTOOL_PATH') }}"

- name: Set amtool_exe with default value
  ansible.builtin.set_fact:
    amtool_exe: "{{ amtool_install_path }}/amtool"
  when: amtool_exe == ""

- name: Set fact to determine if amtool should be installed
  ansible.builtin.set_fact:
    should_install_amtool: false

- name: See if amtool exists
  delegate_to: "{{ amtool_host }}"
  ansible.builtin.stat:
    path: "{{ amtool_exe }}"
  register: amtool_exe_exists

- name: Install amtool if it does not exist
  ansible.builtin.set_fact:
    should_install_amtool: true
  when: not amtool_exe_exists.stat.exists

- name: Get locally-installed amtool version
  delegate_to: "{{ amtool_host }}"
  # amtool prints the version to stderr, which we must redirect to stdout
  # The first line of the version output looks something like this:
  # amtool, version 0.16.1 (branch: HEAD, revision: 571caec2)
  ansible.builtin.shell: |
    set -o pipefail
    {{ amtool_exe }} --version 2>&1 |
    head -1 |
    awk '{print $3}'
  args:
    executable: "/bin/bash"
  changed_when: false
  register: amtool_version
  when: amtool_exe_exists.stat.exists

- name: Get alertmanager version from server
  when: alertmanager_version == "auto"
  block:
    - name: Fail if alertmanager_url is not defined
      ansible.builtin.fail:
        msg: "alertmanager_version is auto, but alertmanager_url is not set!"
      when: alertmanager_url == ""

    - name: Fetch version from alertmanager API
      delegate_to: localhost
      ansible.builtin.uri:
        url: "{{ alertmanager_url }}/api/v2/status"
      until: alertmanager_server_status.status == 200
      retries: 3
      delay: 5
      register: alertmanager_server_status

    - name: Set alertmanager_version fact
      ansible.builtin.set_fact:
        alertmanager_version: "{{ alertmanager_server_status.json.versionInfo.version }}"

- name: Install amtool if the version does not match
  ansible.builtin.set_fact:
    should_install_amtool: true
  when: amtool_exe_exists.stat.exists and amtool_version.stdout != alertmanager_version

- name: Ensure amtool_exe's parent directory exists
  delegate_to: "{{ amtool_host }}"
  ansible.builtin.file:
    path: "{{ amtool_exe | dirname }}"
    state: directory
    mode: "0755"
  when: should_install_amtool

- name: Get host platform name
  ansible.builtin.command: "uname -s"
  delegate_to: "{{ amtool_host }}"
  changed_when: false
  register: uname_system
  when: should_install_amtool

# amtool binaries don't use the same architecture names as the arch/uname tools, so we
# need to do a bit of data munging
- name: Set host architecture fact
  when: should_install_amtool
  block:
    - name: Get host architecture
      ansible.builtin.command: "uname -m"
      delegate_to: "{{ amtool_host }}"
      changed_when: false
      register: uname_arch

    - name: Set host architecture fact for x86_64 systems
      ansible.builtin.set_fact:
        host_arch: "amd64"
      when: uname_arch.stdout == "x86_64"

    - name: Fail if host_arch is not defined
      ansible.builtin.fail:
        msg: "Unsupported host architecture"
      when: host_arch is not defined

- name: Set fact for amtool binary distribution file basename
  ansible.builtin.set_fact:
    amtool_dist_basename: "alertmanager-{{ alertmanager_version }}\
      .{{ uname_system.stdout | lower }}-{{ host_arch }}"
  when: should_install_amtool

- name: Get amtool binary zipfile
  delegate_to: "{{ amtool_host }}"
  ansible.builtin.get_url:
    url: "https://github.com/prometheus/alertmanager/releases/download\
      /v{{ alertmanager_version }}/{{ amtool_dist_basename }}.tar.gz"
    dest: "/tmp/{{ amtool_dist_basename }}.tar.gz"
    mode: "0644"
  when: should_install_amtool

- name: Unarchive amtool tarball
  delegate_to: "{{ amtool_host }}"
  ansible.builtin.unarchive:
    src: "/tmp/{{ amtool_dist_basename }}.tar.gz"
    dest: "/tmp"
    mode: "0755"
    remote_src: true
  when: should_install_amtool

- name: Install amtool
  delegate_to: "{{ amtool_host }}"
  ansible.builtin.copy:
    src: "/tmp/{{ amtool_dist_basename }}/amtool"
    dest: "{{ amtool_exe }}"
    mode: "0755"
    remote_src: true
  when: should_install_amtool
